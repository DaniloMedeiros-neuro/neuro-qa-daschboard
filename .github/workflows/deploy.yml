name: Executando testes automatizados
run-name: ${{ github.event.inputs.repo_name }}

on:
  workflow_dispatch:
    inputs:
      repo_name:
        description: 'Nome do reposit√≥rio (ex: Neurolake/riskpack-credenciais-backend-teste)'
        required: true

jobs:
  test:
    name: ${{ github.event.inputs.repo_name }}
    runs-on: ubuntu-latest

    steps:
    - name: Checkout reposit√≥rio p√∫blico (este)
      uses: actions/checkout@v3

    - name: Clonar reposit√≥rio privado selecionado
      uses: actions/checkout@v4
      with:
        repository: ${{ github.event.inputs.repo_name }}
        token: ${{ secrets.REPO_PRIVATE_TOKEN }}
        path: projeto-privado

    - name: Set REPO_SLUG env var
      run: echo "REPO_SLUG=$(echo '${{ github.event.inputs.repo_name }}' | cut -d'/' -f2)" >> $GITHUB_ENV

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        pip install -r projeto-privado/requirements.txt
        pip install allure-robotframework
        npm install -g allure-commandline

    - name: Run Robot Framework Tests with Allure Listener
      run: |
        mkdir -p allure-results
        robot --listener "allure_robotframework:allure-results" projeto-privado/tests/features || true

    - name: Verificar se resultados foram realmente gerados
      run: |
        echo "üß™ Arquivos na pasta allure-results:"
        find allure-results -type f || echo "‚ö†Ô∏è Nenhum arquivo encontrado!"

    - name: Generate Allure Report with customizations
      run: |
        project_root="$(pwd)"
        output_folder="${project_root}/allure-report/${REPO_SLUG}"
        results_folder="${project_root}/allure-results"
        custom_styles_path="${project_root}/allure-custom/styles.css"
        logo_source_path="${project_root}/allure-custom/neuro-logo.svg"
        favicon_source_path="${project_root}/allure-custom/favicon.ico"
        logo_target_folder="$output_folder/plugin/custom-logo"
        favicon_target_path="$output_folder/favicon.ico"

        allure generate "$results_folder" --clean --lang br -o "$output_folder"

        if [ ! -f "$output_folder/index.html" ]; then
          echo "‚ùå Erro ao gerar o relat√≥rio Allure."
          exit 1
        fi

        cp "$custom_styles_path" "$output_folder/custom.css" || true
        sed -i '/styles.css/a <link rel="stylesheet" type="text/css" href="custom.css">' "$output_folder/index.html" || true
        sed -i 's|<title>Allure Report</title>|<title>Neuro Report</title>|' "$output_folder/index.html" || true

        summary_file="$output_folder/widgets/summary.json"
        if [ -f "$summary_file" ]; then
          sed -i 's/Allure Report/Neuro Report/g' "$summary_file"
        fi

        mkdir -p "$logo_target_folder"
        cp "$logo_source_path" "$logo_target_folder/neuro-logo.svg" || true
        cp "$favicon_source_path" "$favicon_target_path" || true

        if grep -q '<link rel="icon"' "$output_folder/index.html"; then
          sed -i 's|<link rel="icon[^>]*>|<link rel="icon" type="image/x-icon" href="favicon.ico">|' "$output_folder/index.html" || true
        else
          sed -i '/<head>/a <link rel="icon" type="image/x-icon" href="favicon.ico">' "$output_folder/index.html" || true
        fi

    - name: Deploy Allure Report to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: allure-report/${{ env.REPO_SLUG }}
        publish_branch: gh-pages
        destination_dir: ${{ env.REPO_SLUG }}